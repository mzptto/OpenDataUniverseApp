AWSTemplateFormatVersion: '2010-09-09'
Description: 'OSDU Data Explorer - API Gateway and Lambda Functions'

Parameters:
  ProjectName:
    Type: String
    Default: 'osdu-data-explorer'
  Environment:
    Type: String
    Default: 'prod'
  SecretsManagerArn:
    Type: String
    Description: 'ARN of the Secrets Manager secret containing OSDU credentials'

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                Resource: !Ref SecretsManagerArn

  # Search API Lambda Function
  SearchApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-search-api'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Deploy actual code' })
            };
          };
      Environment:
        Variables:
          OSDU_SECRET_NAME: !Sub '${ProjectName}-${Environment}-osdu-credentials'
      Timeout: 30

  # Storage API Lambda Function
  StorageApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-storage-api'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Deploy actual code' })
            };
          };
      Environment:
        Variables:
          OSDU_SECRET_NAME: !Sub '${ProjectName}-${Environment}-osdu-credentials'
      Timeout: 30

  # Token API Lambda Function
  TokenApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-token-api'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Deploy actual code' })
            };
          };
      Environment:
        Variables:
          OSDU_SECRET_NAME: !Sub '${ProjectName}-${Environment}-osdu-credentials'
      Timeout: 30

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: 'OSDU Data Explorer API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'api'

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'search'

  StorageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'storage'

  StorageRecordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref StorageResource
      PathPart: '{recordId}'

  TokenResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'refresh-token'

  # API Gateway Methods
  SearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SearchResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchApiFunction.Arn}/invocations'

  StorageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StorageRecordResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StorageApiFunction.Arn}/invocations'

  TokenMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref TokenResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TokenApiFunction.Arn}/invocations'

  # Lambda Permissions
  SearchApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SearchApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  StorageApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StorageApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  TokenApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TokenApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SearchMethod
      - StorageMethod
      - TokenMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ApiUrl'

  SearchApiFunction:
    Description: 'Search API Lambda Function Name'
    Value: !Ref SearchApiFunction

  StorageApiFunction:
    Description: 'Storage API Lambda Function Name'
    Value: !Ref StorageApiFunction

  TokenApiFunction:
    Description: 'Token API Lambda Function Name'
    Value: !Ref TokenApiFunction